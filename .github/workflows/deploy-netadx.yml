name: Deploy netADX.ai to Cloudflare Pages

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'netadx.ai/**'
  pull_request:
    branches:
      - main
    paths:
      - 'netadx.ai/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

env:
  HUGO_VERSION: '0.150.0'
  NODE_VERSION: '20'
  CLOUDFLARE_ACCOUNT_ID: '405de1c92e7c8828b69182246be7139c'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      netadx: ${{ steps.changes.outputs.netadx }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            netadx:
              - 'netadx.ai/**'

  build-and-deploy:
    name: Build & Deploy netADX.ai
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.netadx == 'true' || github.event_name == 'workflow_dispatch'

    defaults:
      run:
        working-directory: netadx.ai

    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hugo modules
        uses: actions/cache@v4
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Verify Hugo installation
        run: hugo version

      - name: Build Hugo site
        run: |
          hugo --cleanDestinationDir --minify --gc
        env:
          HUGO_ENVIRONMENT: production

      - name: Verify build output
        run: |
          echo "Build completed. Generated files:"
          ls -la public/
          echo "Total files generated:"
          find public/ -type f | wc -l

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Verify Wrangler installation
        run: wrangler --version

      - name: Deploy to Cloudflare Pages (Production)
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        run: |
          wrangler pages deploy public \
            --project-name=netadx-ai \
            --branch=main \
            --commit-hash=${{ github.sha }} \
            --commit-message="${{ github.event.head_commit.message || 'Manual deployment' }}" \
            --commit-dirty=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy to Cloudflare Pages (Preview)
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
        run: |
          wrangler pages deploy public \
            --project-name=netadx-ai \
            --branch=preview-${{ github.sha }} \
            --commit-hash=${{ github.sha }} \
            --commit-message="${{ github.event.head_commit.message || 'Preview deployment' }}" \
            --commit-dirty=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `preview-${context.sha}`;
            const previewUrl = `https://${branchName}.netadx-ai.pages.dev`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview deployment ready!**

              üì± **Preview URL**: ${previewUrl}
              üîÑ **Branch**: \`${branchName}\`
              üìù **Commit**: ${context.sha.substring(0, 7)}

              The preview will be updated automatically with new commits to this PR.`
            });

      - name: Create deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const environment = context.ref === 'refs/heads/main' ? 'production' : 'preview';
            const url = environment === 'production'
              ? 'https://netadx.vn'
              : `https://preview-${context.sha}.netadx-ai.pages.dev`;

            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: state,
              environment_url: url,
              description: `Deployment ${state} for netADX.ai`
            });

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://preview-${{ github.sha }}.netadx-ai.pages.dev
          configPath: ./netadx.ai/.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "‚úÖ netADX.ai deployment successful!"
          echo "üåç Live at: https://netadx.vn"

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "‚ùå netADX.ai deployment failed!"
          echo "Check the logs above for details."
          exit 1
