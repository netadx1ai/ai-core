# Service Discovery Configuration
# AI-CORE Platform - Service Registry and Health Monitoring

server:
  host: "0.0.0.0"
  port: 8080
  shutdown_timeout: 30
  keep_alive: 75
  max_connections: 10000
  request_timeout: 60
  body_limit: "10MB"

# Service registry configuration
registry:
  # Service registration settings
  registration:
    default_ttl: 30  # seconds
    heartbeat_interval: 10  # seconds
    grace_period: 15  # seconds before marking unhealthy
    max_retries: 3
    retry_interval: 5  # seconds

  # Service discovery settings
  discovery:
    cache_ttl: 60  # seconds
    refresh_interval: 30  # seconds
    batch_size: 100
    enable_caching: true

  # Health check configuration
  health_checks:
    enabled: true
    default_interval: 30  # seconds
    timeout: 5  # seconds
    failure_threshold: 3
    success_threshold: 2

    # Health check types
    types:
      http:
        enabled: true
        default_path: "/health"
        follow_redirects: false

      tcp:
        enabled: true
        connect_timeout: 5

      grpc:
        enabled: true
        service_name: "health"

# Load balancing configuration
load_balancer:
  # Default strategy: round_robin, least_connections, weighted_round_robin, consistent_hash, random
  default_strategy: "round_robin"

  strategies:
    round_robin:
      enabled: true

    least_connections:
      enabled: true
      connection_tracking: true

    weighted_round_robin:
      enabled: true
      default_weight: 100

    consistent_hash:
      enabled: true
      virtual_nodes: 150
      hash_function: "sha256"

    random:
      enabled: true

# Circuit breaker configuration
circuit_breaker:
  enabled: true
  # Default settings for all services
  defaults:
    failure_threshold: 5
    recovery_timeout: 60  # seconds
    success_threshold: 3
    timeout: 30  # seconds
    max_retries: 3

  # Per-service overrides
  services:
    critical-service:
      failure_threshold: 3
      recovery_timeout: 30

    batch-service:
      failure_threshold: 10
      timeout: 120

# Service mesh integration
service_mesh:
  enabled: true

  # Service mesh backend
  backend: "native"  # native, consul, etcd, kubernetes

  # Consul configuration (if backend is consul)
  consul:
    address: "http://consul:8500"
    datacenter: "dc1"
    token: ""

  # etcd configuration (if backend is etcd)
  etcd:
    endpoints: ["http://etcd:2379"]
    username: ""
    password: ""

  # Kubernetes configuration (if backend is kubernetes)
  kubernetes:
    namespace: "default"
    service_account: ""

# Database configuration
database:
  postgres:
    url: "postgresql://postgres:password@localhost:5432/ai_core"
    max_connections: 20
    min_connections: 5
    acquire_timeout: 30
    idle_timeout: 600
    max_lifetime: 1800

  redis:
    url: "redis://localhost:6379"
    max_connections: 20
    acquire_timeout: 30
    idle_timeout: 300
    max_lifetime: 3600

    # Redis-specific settings
    database: 0
    prefix: "service_discovery:"

# Authentication and authorization
auth:
  jwt:
    secret: "${JWT_SECRET}"
    expiration: 3600  # 1 hour

  api_keys:
    enabled: true
    header_name: "X-API-Key"

  rbac:
    enabled: true
    default_role: "viewer"

    roles:
      admin:
        permissions: ["*"]

      operator:
        permissions:
          - "service:register"
          - "service:deregister"
          - "service:update"
          - "service:read"

      viewer:
        permissions: ["service:read"]

# Monitoring and observability
monitoring:
  metrics:
    enabled: true
    path: "/metrics"
    include_labels: true

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger:14268/api/traces"
    sample_rate: 0.1

  logging:
    level: "info"
    format: "json"

  health:
    enabled: true
    path: "/health"
    deep_checks: true

# Rate limiting
rate_limiting:
  enabled: true

  # Global rate limits
  global:
    requests_per_minute: 10000
    burst: 1000

  # Per-endpoint rate limits
  endpoints:
    register:
      requests_per_minute: 100
      burst: 20

    deregister:
      requests_per_minute: 100
      burst: 20

    discover:
      requests_per_minute: 1000
      burst: 200

# Service configuration management
configuration:
  enabled: true

  # Configuration storage
  storage:
    backend: "database"  # database, file, consul, etcd

  # Configuration versioning
  versioning:
    enabled: true
    max_versions: 10

  # Configuration validation
  validation:
    enabled: true
    schema_validation: true

  # Configuration distribution
  distribution:
    enabled: true
    push_updates: true
    notification_channels: ["webhook", "redis_pubsub"]

# Retry and backoff configuration
retry:
  max_attempts: 3
  initial_interval: 1  # seconds
  max_interval: 60  # seconds
  multiplier: 2.0
  jitter: true

# Security settings
security:
  tls:
    enabled: false
    cert_file: ""
    key_file: ""
    ca_file: ""

  cors:
    enabled: true
    allowed_origins: ["*"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["*"]
    max_age: 3600

  headers:
    x_frame_options: "DENY"
    x_content_type_options: "nosniff"
    x_xss_protection: "1; mode=block"

# Development and debugging
development:
  debug: false
  pretty_logs: true
  mock_external_services: false

  # Test endpoints
  test_endpoints:
    enabled: false
    prefix: "/test"

# Environment-specific overrides
environments:
  development:
    server:
      port: 8080
    database:
      postgres:
        url: "postgresql://postgres:password@localhost:5432/ai_core_dev"
    monitoring:
      logging:
        level: "debug"
        pretty_logs: true

  production:
    server:
      port: 8080
    security:
      tls:
        enabled: true
    monitoring:
      logging:
        level: "warn"
    rate_limiting:
      global:
        requests_per_minute: 50000
