# AI-PLATFORM Intelligent Automation Platform - Docker Compose Development Environment
# Modern 2025 stack with advanced monitoring, security, and development tools
# Version: 3.9 (Docker Compose specification)

version: '3.9'

# ================================
# MAIN APPLICATION SERVICES
# ================================
services:
  # API Gateway - Rust/Axum Backend
  api-gateway:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.api
      target: builder
    container_name: AI-PLATFORM-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics endpoint
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
      - DATABASE_URL=postgresql://ai_core_user:ai_core_password@postgres:5432/ai_core
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://ai_core_admin:ai_core_mongo_password@mongodb:27017/automation_platform
      - CLICKHOUSE_URL=http://ai_core_clickhouse:ai_core_clickhouse_password@clickhouse:8123/analytics
      - JWT_SECRET=dev_jwt_secret_change_in_production
      - API_RATE_LIMIT=1000
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=AI-PLATFORM-api-gateway
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ../../src/api-gateway/src:/app/src/api-gateway/src:ro  # Hot reload for development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - AI-PLATFORM-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=PathPrefix(`/api`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8080"

  # React/Tauri Frontend UI
  frontend-ui:
    build:
      context: ../../src/ui
      dockerfile: ../../infrastructure/docker/Dockerfile.ui
      target: development
    container_name: AI-PLATFORM-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080/ws
      - FAST_REFRESH=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ../../src/ui:/app:cached
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-gateway
    networks:
      - AI-PLATFORM-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

# ================================
# DATABASE SERVICES - HYBRID ARCHITECTURE
# ================================

  # PostgreSQL - ACID Transactions (20% of data)
  postgres:
    image: postgres:16-alpine
    container_name: AI-PLATFORM-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_core
      POSTGRES_USER: ai_core_user
      POSTGRES_PASSWORD: ai_core_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements,pg_hint_plan
      -c log_statement=all
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_core_user -d ai_core"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - AI-PLATFORM-network

  # ClickHouse - Analytics Powerhouse (40% of data)
  clickhouse:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: AI-PLATFORM-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: ai_core_clickhouse
      CLICKHOUSE_PASSWORD: ai_core_clickhouse_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
      - "9009:9009"  # Native secure interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./clickhouse/config:/etc/clickhouse-server/config.d:ro
      - ./clickhouse/users:/etc/clickhouse-server/users.d:ro
      - ./clickhouse/init:/docker-entrypoint-initdb.d:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - AI-PLATFORM-network

  # MongoDB - Document Storage (25% of data)
  mongodb:
    image: mongo:7.0
    container_name: AI-PLATFORM-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ai_core_admin
      MONGO_INITDB_ROOT_PASSWORD: ai_core_mongo_password
      MONGO_INITDB_DATABASE: automation_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./mongodb/conf/mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/automation_platform --quiet
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - AI-PLATFORM-network

  # Redis - Cache & Real-time (15% of data)
  redis:
    image: redis:7.2-alpine
    container_name: AI-PLATFORM-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - AI-PLATFORM-network

# ================================
# WORKFLOW ORCHESTRATION
# ================================

  # Temporal.io Server - Workflow Engine
  temporal:
    image: temporalio/server:1.22.0
    container_name: AI-PLATFORM-temporal
    restart: unless-stopped
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - TEMPORAL_CLI_SHOW_STACKS=1
    ports:
      - "7233:7233"   # gRPC endpoint
      - "8233:8233"   # Web UI
    volumes:
      - temporal_data:/etc/temporal
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - AI-PLATFORM-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:2.21.3
    container_name: AI-PLATFORM-temporal-web
    restart: unless-stopped
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    ports:
      - "8088:8088"
    depends_on:
      - temporal
    networks:
      - AI-PLATFORM-network

# ================================
# MONITORING & OBSERVABILITY STACK
# ================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: AI-PLATFORM-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - AI-PLATFORM-network

  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: AI-PLATFORM-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ai_core_grafana_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource,redis-datasource,mongodb-datasource
      - GF_SERVER_ENABLE_GZIP=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - AI-PLATFORM-network

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: AI-PLATFORM-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "9411:9411"    # Zipkin
    volumes:
      - jaeger_data:/tmp
    networks:
      - AI-PLATFORM-network

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: AI-PLATFORM-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - AI-PLATFORM-network

  # Promtail - Log Shipper
  promtail:
    image: grafana/promtail:2.9.2
    container_name: AI-PLATFORM-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./logs:/app/logs:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - AI-PLATFORM-network

# ================================
# DATABASE ADMINISTRATION TOOLS
# ================================

  # pgAdmin - PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: AI-PLATFORM-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aicore.local
      PGADMIN_DEFAULT_PASSWORD: pgadmin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - AI-PLATFORM-network

  # Mongo Express - MongoDB Management
  mongo-express:
    image: mongo-express:1.0.2
    container_name: AI-PLATFORM-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ai_core_admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: ai_core_mongo_password
      ME_CONFIG_MONGODB_URL: mongodb://ai_core_admin:ai_core_mongo_password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: mongo_admin_password
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    networks:
      - AI-PLATFORM-network

  # Redis Insight - Redis Management
  redis-insight:
    image: redislabs/redisinsight:2.32
    container_name: AI-PLATFORM-redis-insight
    restart: unless-stopped
    ports:
      - "8083:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - AI-PLATFORM-network

  # ClickHouse Play - Query Interface
  clickhouse-play:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: AI-PLATFORM-clickhouse-play
    restart: unless-stopped
    ports:
      - "8084:8123"
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=ai_core_clickhouse
      - CLICKHOUSE_PASSWORD=ai_core_clickhouse_password
    command: clickhouse-client --host clickhouse --port 9000 --user ai_core_clickhouse --password ai_core_clickhouse_password --multiquery
    depends_on:
      - clickhouse
    networks:
      - AI-PLATFORM-network

# ================================
# REVERSE PROXY & LOAD BALANCER
# ================================

  # Traefik - Modern Reverse Proxy with Auto-Discovery
  traefik:
    image: traefik:v3.0
    container_name: AI-PLATFORM-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@aicore.local"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - AI-PLATFORM-network

# ================================
# DEVELOPMENT & TESTING TOOLS
# ================================

  # Mailhog - Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: AI-PLATFORM-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - AI-PLATFORM-network

  # MinIO - S3 Compatible Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: AI-PLATFORM-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ai_core_minio
      MINIO_ROOT_PASSWORD: ai_core_minio_password
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - AI-PLATFORM-network

  # Kafka - Event Streaming (for production-like development)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: AI-PLATFORM-kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - AI-PLATFORM-network

  # Zookeeper - Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: AI-PLATFORM-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - AI-PLATFORM-network

# ================================
# PERSISTENT VOLUMES
# ================================
volumes:
  # Application data
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  clickhouse_data:
    driver: local
  clickhouse_logs:
    driver: local
  redis_data:
    driver: local
  temporal_data:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  loki_data:
    driver: local

  # Management tools
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local

  # Infrastructure
  traefik_data:
    driver: local
  minio_data:
    driver: local

  # Event streaming
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local

# ================================
# NETWORK CONFIGURATION
# ================================
networks:
  AI-PLATFORM-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: AI-PLATFORM-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

# ================================
# SECRETS (For Production Use)
# ================================
# secrets:
#   jwt_secret:
#     external: true
#   db_password:
#     external: true
