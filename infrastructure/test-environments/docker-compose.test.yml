# AI-PLATFORM Test Environment Docker Compose Configuration
# FAANG-Enhanced Testing Infrastructure - DevOps Agent Implementation T7.1
#
# Comprehensive test environment with:
# - Multi-database setup (PostgreSQL, ClickHouse, MongoDB, Redis)
# - Test service containers
# - Monitoring and observability stack
# - Network isolation and service discovery
# - Volume management for data persistence
# - Health checks and dependency management

version: '3.8'

# ============================================================================
# Network Configuration
# ============================================================================
networks:
  aicore-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volume Configuration
# ============================================================================
volumes:
  postgres-test-data:
    driver: local
  clickhouse-test-data:
    driver: local
  mongodb-test-data:
    driver: local
  redis-test-data:
    driver: local
  prometheus-test-data:
    driver: local
  grafana-test-data:
    driver: local

# ============================================================================
# Services Configuration
# ============================================================================
services:
  # ==========================================================================
  # Database Services
  # ==========================================================================

  # PostgreSQL - Primary transactional database
  postgres-test:
    image: postgres:15-alpine
    container_name: aicore-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: aicore_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password_secure_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ../../schemas/testing/test-postgresql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./scripts/postgres-init.sh:/docker-entrypoint-initdb.d/02-init.sh:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aicore_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ClickHouse - Analytics and metrics database
  clickhouse-test:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: aicore-clickhouse-test
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: aicore_test
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: test_clickhouse_123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-test-data:/var/lib/clickhouse
      - ../../schemas/testing/test-clickhouse-schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
      - ./configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml:ro
      - ./configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # MongoDB - Document database for flexible schemas
  mongodb-test:
    image: mongo:7
    container_name: aicore-mongodb-test
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test_mongo_123
      MONGO_INITDB_DATABASE: aicore_test
    ports:
      - "27017:27017"
    volumes:
      - mongodb-test-data:/data/db
      - ../../schemas/testing/test-mongodb-schema.js:/docker-entrypoint-initdb.d/schema.js:ro
      - ./scripts/mongo-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis - Caching and session storage
  redis-test:
    image: redis:7-alpine
    container_name: aicore-redis-test
    restart: unless-stopped
    command: redis-server --requirepass test_redis_123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-test-data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.13
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_redis_123", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ==========================================================================
  # AI-PLATFORM Test Services
  # ==========================================================================

  # Test Data API Service
  test-data-api:
    build:
      context: ../../src/services/test-data-api
      dockerfile: Dockerfile
    container_name: aicore-test-data-api
    restart: unless-stopped
    environment:
      RUST_LOG: debug
      DATABASE_URL: postgresql://postgres:test_password_secure_123@postgres-test:5432/aicore_test
      CLICKHOUSE_URL: http://clickhouse:test_clickhouse_123@clickhouse-test:8123/aicore_test
      MONGODB_URL: mongodb://admin:test_mongo_123@mongodb-test:27017/aicore_test?authSource=admin
      REDIS_URL: redis://:test_redis_123@redis-test:6379/0
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8002
      JWT_SECRET: test_jwt_secret_for_testing_only_not_production
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    ports:
      - "8002:8002"
    volumes:
      - ./logs:/app/logs
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.20
    depends_on:
      postgres-test:
        condition: service_healthy
      clickhouse-test:
        condition: service_healthy
      mongodb-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service (for testing auth flows)
  auth-service-test:
    build:
      context: ../../src/services/auth-service
      dockerfile: Dockerfile
    container_name: aicore-auth-service-test
    restart: unless-stopped
    environment:
      RUST_LOG: debug
      DATABASE_URL: postgresql://postgres:test_password_secure_123@postgres-test:5432/aicore_test
      REDIS_URL: redis://:test_redis_123@redis-test:6379/1
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8001
      JWT_SECRET: test_jwt_secret_for_testing_only_not_production
      MFA_SECRET_KEY: test_mfa_secret_key_for_testing_only
    ports:
      - "8001:8001"
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.21
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Frontend Application (for E2E testing)
  # ==========================================================================

  # React Frontend Application
  frontend-test:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.test
      args:
        REACT_APP_API_URL: http://localhost:8000/api
        REACT_APP_AUTH_URL: http://localhost:8001
        REACT_APP_TEST_DATA_URL: http://localhost:8002
    container_name: aicore-frontend-test
    restart: unless-stopped
    environment:
      NODE_ENV: test
      REACT_APP_VERSION: test
    ports:
      - "3000:3000"
    volumes:
      - ../../frontend/src:/app/src
      - ../../frontend/public:/app/public
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.30
    depends_on:
      - test-data-api
      - auth-service-test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Monitoring and Observability
  # ==========================================================================

  # Prometheus - Metrics collection
  prometheus-test:
    image: prom/prometheus:latest
    container_name: aicore-prometheus-test
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - prometheus-test-data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring dashboards
  grafana-test:
    image: grafana/grafana:latest
    container_name: aicore-grafana-test
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: test_grafana_123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana-test-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.41
    depends_on:
      - prometheus-test
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - Distributed tracing
  jaeger-test:
    image: jaegertracing/all-in-one:latest
    container_name: aicore-jaeger-test
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "14250:14250"  # Jaeger gRPC
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.42
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Load Balancer and API Gateway (for integration testing)
  # ==========================================================================

  # Nginx - Load balancer and reverse proxy
  nginx-test:
    image: nginx:alpine
    container_name: aicore-nginx-test
    restart: unless-stopped
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/test-ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.50
    depends_on:
      - test-data-api
      - auth-service-test
      - frontend-test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Test Execution Services
  # ==========================================================================

  # K6 Performance Testing Service
  k6-test:
    image: grafana/k6:latest
    container_name: aicore-k6-test
    restart: "no"
    environment:
      BASE_URL: http://nginx-test
      TEST_TYPE: load
      DURATION: 5m
      VUS: 10
    volumes:
      - ../../tests/performance:/scripts
      - ./test-results:/results
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.60
    depends_on:
      - nginx-test
    profiles:
      - performance-testing

  # Playwright Test Runner
  playwright-test:
    build:
      context: ../../tests/e2e
      dockerfile: Dockerfile.test
    container_name: aicore-playwright-test
    restart: "no"
    environment:
      BASE_URL: http://nginx-test
      CI: true
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
    volumes:
      - ../../tests/e2e:/app
      - ./test-results/e2e:/app/test-results
      - ./test-results/playwright-report:/app/playwright-report
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.61
    depends_on:
      - nginx-test
      - frontend-test
    profiles:
      - e2e-testing

  # ==========================================================================
  # Utility Services
  # ==========================================================================

  # Mailhog - Email testing
  mailhog-test:
    image: mailhog/mailhog:latest
    container_name: aicore-mailhog-test
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.70
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - S3-compatible object storage for test artifacts
  minio-test:
    image: minio/minio:latest
    container_name: aicore-minio-test
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: testuser
      MINIO_ROOT_PASSWORD: testpass123
    ports:
      - "9001:9000"  # API
      - "9002:9001"  # Console
    volumes:
      - ./minio-data:/data
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.71
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ==========================================================================
  # Test Data Seeding Service
  # ==========================================================================

  # Test data seeder
  data-seeder:
    build:
      context: ../../tools/data-seeder
      dockerfile: Dockerfile
    container_name: aicore-data-seeder
    restart: "no"
    environment:
      DATABASE_URL: postgresql://postgres:test_password_secure_123@postgres-test:5432/aicore_test
      MONGODB_URL: mongodb://admin:test_mongo_123@mongodb-test:27017/aicore_test?authSource=admin
      REDIS_URL: redis://:test_redis_123@redis-test:6379/0
      SEED_USERS: 100
      SEED_WORKFLOWS: 50
      SEED_ENVIRONMENTS: 5
    networks:
      aicore-test-network:
        ipv4_address: 172.20.0.80
    depends_on:
      postgres-test:
        condition: service_healthy
      mongodb-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    profiles:
      - data-seeding

# ============================================================================
# Environment-specific configurations
# ============================================================================

# Profiles for different testing scenarios:
# - docker-compose -f docker-compose.test.yml up                    # Core services only
# - docker-compose -f docker-compose.test.yml --profile performance-testing up  # Include K6
# - docker-compose -f docker-compose.test.yml --profile e2e-testing up         # Include Playwright
# - docker-compose -f docker-compose.test.yml --profile data-seeding up        # Include data seeder

# Usage examples:
# 1. Start all core services:
#    docker-compose -f docker-compose.test.yml up -d
#
# 2. Run performance tests:
#    docker-compose -f docker-compose.test.yml --profile performance-testing run --rm k6-test
#
# 3. Run E2E tests:
#    docker-compose -f docker-compose.test.yml --profile e2e-testing run --rm playwright-test
#
# 4. Seed test data:
#    docker-compose -f docker-compose.test.yml --profile data-seeding run --rm data-seeder
#
# 5. View logs:
#    docker-compose -f docker-compose.test.yml logs -f [service-name]
#
# 6. Scale services:
#    docker-compose -f docker-compose.test.yml up -d --scale test-data-api=3
#
# 7. Stop and cleanup:
#    docker-compose -f docker-compose.test.yml down -v
